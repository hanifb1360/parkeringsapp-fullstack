// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'models/parking.dart';
import 'models/parking_space.dart';
import 'models/person.dart';
import 'models/vehicle.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5015027914958512335),
      name: 'Parking',
      lastPropertyId: const IdUid(5, 5442183871030847053),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6307304295593333486),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5122590706248697757),
            name: 'vehicleRegNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3790663443046580143),
            name: 'spaceNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6715833834397126402),
            name: 'startTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5442183871030847053),
            name: 'endTime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4647017389975906473),
      name: 'ParkingSpace',
      lastPropertyId: const IdUid(3, 278493858731215231),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3190966605757602277),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7844081883961746666),
            name: 'spaceNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 278493858731215231),
            name: 'isOccupied',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6241385207373150112),
      name: 'Person',
      lastPropertyId: const IdUid(3, 2849817343485822149),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2438896930970458084),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3904661355112402022),
            name: 'personalNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2849817343485822149),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8338507857970779540),
      name: 'Vehicle',
      lastPropertyId: const IdUid(4, 8152864050035943998),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8039053713976805612),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4928942183748379912),
            name: 'regNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6044305739017911674),
            name: 'ownerPersonalNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8152864050035943998),
            name: 'model',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 8338507857970779540),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Parking: EntityDefinition<Parking>(
        model: _entities[0],
        toOneRelations: (Parking object) => [],
        toManyRelations: (Parking object) => {},
        getId: (Parking object) => object.id,
        setId: (Parking object, int id) {
          object.id = id;
        },
        objectToFB: (Parking object, fb.Builder fbb) {
          final vehicleRegNumberOffset =
              fbb.writeString(object.vehicleRegNumber);
          final spaceNumberOffset = fbb.writeString(object.spaceNumber);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, vehicleRegNumberOffset);
          fbb.addOffset(2, spaceNumberOffset);
          fbb.addInt64(3, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Parking(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              vehicleRegNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              spaceNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              startTime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              endTime: endTimeValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(endTimeValue));

          return object;
        }),
    ParkingSpace: EntityDefinition<ParkingSpace>(
        model: _entities[1],
        toOneRelations: (ParkingSpace object) => [],
        toManyRelations: (ParkingSpace object) => {},
        getId: (ParkingSpace object) => object.id,
        setId: (ParkingSpace object, int id) {
          object.id = id;
        },
        objectToFB: (ParkingSpace object, fb.Builder fbb) {
          final spaceNumberOffset = fbb.writeString(object.spaceNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, spaceNumberOffset);
          fbb.addBool(2, object.isOccupied);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ParkingSpace(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              spaceNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isOccupied: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 8, false));

          return object;
        }),
    Person: EntityDefinition<Person>(
        model: _entities[2],
        toOneRelations: (Person object) => [],
        toManyRelations: (Person object) => {},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final personalNumberOffset = fbb.writeString(object.personalNumber);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, personalNumberOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Person(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              personalNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    Vehicle: EntityDefinition<Vehicle>(
        model: _entities[3],
        toOneRelations: (Vehicle object) => [],
        toManyRelations: (Vehicle object) => {},
        getId: (Vehicle object) => object.id,
        setId: (Vehicle object, int id) {
          object.id = id;
        },
        objectToFB: (Vehicle object, fb.Builder fbb) {
          final regNumberOffset = fbb.writeString(object.regNumber);
          final ownerPersonalNumberOffset =
              fbb.writeString(object.ownerPersonalNumber);
          final modelOffset = fbb.writeString(object.model);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, regNumberOffset);
          fbb.addOffset(2, ownerPersonalNumberOffset);
          fbb.addOffset(3, modelOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Vehicle(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              regNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ownerPersonalNumber:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, ''),
              model: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Parking] entity fields to define ObjectBox queries.
class Parking_ {
  /// see [Parking.id]
  static final id = QueryIntegerProperty<Parking>(_entities[0].properties[0]);

  /// see [Parking.vehicleRegNumber]
  static final vehicleRegNumber =
      QueryStringProperty<Parking>(_entities[0].properties[1]);

  /// see [Parking.spaceNumber]
  static final spaceNumber =
      QueryStringProperty<Parking>(_entities[0].properties[2]);

  /// see [Parking.startTime]
  static final startTime =
      QueryIntegerProperty<Parking>(_entities[0].properties[3]);

  /// see [Parking.endTime]
  static final endTime =
      QueryIntegerProperty<Parking>(_entities[0].properties[4]);
}

/// [ParkingSpace] entity fields to define ObjectBox queries.
class ParkingSpace_ {
  /// see [ParkingSpace.id]
  static final id =
      QueryIntegerProperty<ParkingSpace>(_entities[1].properties[0]);

  /// see [ParkingSpace.spaceNumber]
  static final spaceNumber =
      QueryStringProperty<ParkingSpace>(_entities[1].properties[1]);

  /// see [ParkingSpace.isOccupied]
  static final isOccupied =
      QueryBooleanProperty<ParkingSpace>(_entities[1].properties[2]);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// see [Person.id]
  static final id = QueryIntegerProperty<Person>(_entities[2].properties[0]);

  /// see [Person.personalNumber]
  static final personalNumber =
      QueryStringProperty<Person>(_entities[2].properties[1]);

  /// see [Person.name]
  static final name = QueryStringProperty<Person>(_entities[2].properties[2]);
}

/// [Vehicle] entity fields to define ObjectBox queries.
class Vehicle_ {
  /// see [Vehicle.id]
  static final id = QueryIntegerProperty<Vehicle>(_entities[3].properties[0]);

  /// see [Vehicle.regNumber]
  static final regNumber =
      QueryStringProperty<Vehicle>(_entities[3].properties[1]);

  /// see [Vehicle.ownerPersonalNumber]
  static final ownerPersonalNumber =
      QueryStringProperty<Vehicle>(_entities[3].properties[2]);

  /// see [Vehicle.model]
  static final model = QueryStringProperty<Vehicle>(_entities[3].properties[3]);
}
